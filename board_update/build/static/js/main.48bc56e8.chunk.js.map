{"version":3,"sources":["components/TOC.js","components/ReadArticle.js","components/Subject.js","components/Control.js","components/CreateContent.js","components/UpdateContent.js","App.js","reportWebVitals.js","index.js"],"names":["TOC","newProps","newState","this","props","data","console","log","lists","i","length","push","data-id","id","onClick","e","preventDefault","onChangePage","target","dataset","bind","href","title","Component","ReadArticle","desc","Subject","sub","Control","onChangeMode","type","value","CreateContent","action","method","onSubmit","name","placeholder","UpdateContent","state","y_title","y_desc","y_id","setState","onChange","inputFormHendler","App","mode","selected_content_id","subject","welcome","contents","num","_title","_desc","_article","r_num","getReadContent","_contents","concat","Array","from","Up_Num","className","Number","_mode","getContent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48bc56e8.chunk.js","sourcesContent":["import React, {Component} from 'react';\n//여러가지 엘리먼트가 자동생성되면 오류가 난다. 그래서 key를 주면됨\nclass TOC extends Component {\n    shouldComponentUpdate(newProps, newState){\n      if(this.props.data === newProps.data){\n        return false;\n      }else{\n        console.log(newProps);\n        return true; // 트루 일때 만 렌더 수행 가능\n      }\n      \n    }// props와 state가 바뀐걸 newprops 와 newState로 받음 props혹은state가 변경될떄 호출됨\n    render(){\n      console.log('toc render!!!!')\n      var data = this.props.data;\n      var lists = [];\n      for(var i = 0; i < data.length; i++)\n         lists.push(\n         <li key={data[i].id}> \n            <a data-id={data[i].id} onClick = {function(e){\n              e.preventDefault();\n              this.props.onChangePage(e.target.dataset.id); // 2021 05 07\n            }.bind(this)}  href={\"/content/\"+data[i].id}>{data[i].title}</a>\n         </li>);\n      return(\n        <nav>\n          <ul>\n             {lists}\n          </ul>\n        </nav>\n      );\n    }\n  }\n\n  export default  TOC; //toc를 선택해서 내보냄 ","import React, { Component } from \"react\";\n\nclass ReadArticle extends Component { \n    render(){\n      return(\n        <article>\n          <h2>{this.props.title}</h2>\n          {this.props.desc}\n          <h1>!!!</h1>\n        </article>\n      );\n    }\n  }\n\nexport default ReadArticle;","import React, {Component} from 'react';\n\nclass Subject extends Component {\n    render(){\n      return(\n        <header>\n           <h1><a href=\"/\" onClick = {function(e){\n             e.preventDefault();\n             this.props.onChangePage();\n           }.bind(this)}>{this.props.title}</a></h1>\n           {this.props.sub}\n        </header>\n      );\n    }\n  }\n\n  export default Subject;\n\n","import React, {Component} from 'react';\n\nclass Control extends Component {\n    render(){\n      return(\n        <ul>\n          <li><a href=\"/create\" onClick={function(e){\n            e.preventDefault();\n            this.props.onChangeMode('create');\n          }.bind(this)}>create</a></li>\n          <li><a href=\"/update\" onClick={function(e){\n            e.preventDefault();\n            this.props.onChangeMode('update');\n          }.bind(this)}>update</a></li>\n          <li><input type =\"button\" value=\"delete\" onClick={function(e){\n            e.preventDefault();\n            this.props.onChangeMode('delete');\n          }.bind(this)} /></li>\n        </ul>\n      );\n    }\n  }\n\n  export default Control;\n\n","import React, { Component } from \"react\";\n\nclass CreateContent extends Component { \n    render(){\n      return(\n        <article>\n          <h2>{this.props.title}</h2>\n            <form action =\"/create_process\" method=\"post\" onSubmit={function(e){\n                e.preventDefault();\n                this.props.onSubmit(e.target.title.value, e.target.desc.value)\n            }.bind(this)}> \n                <p><input type=\"text\" name=\"title\" placeholder=\"title\" /></p>\n                <p><textarea name=\"desc\" placeholder=\"description\"></textarea></p>\n                <p><input type=\"submit\" value=\"submint\"/></p>\n            </form>\n            {/* onsubmit은 submit타입 버튼누른 후 이벤트 발동 */}\n        </article>\n      );\n    }\n  }\n\nexport default CreateContent;","import React, { Component } from \"react\";\n\nclass UpdateContent extends Component { \n    constructor(props){ // 시작하자 마자 초기화로 자동 호출\n        super(props); //super는 부모에 constructor 호출\n        \n        this.state = {\n            title : this.props.y_title,\n            desc : this.props.y_desc,\n            id : this.props.y_id\n        }// 부모에 state에 접근 \n        //this.inputFormHendler = this.inputFormHendler.bind(this); \n    }\n\n    inputFormHendler(e){\n        this.setState({[e.target.name]:e.target.value});\n    }\n    \n    render(){\n      return(\n        <article>\n          <h2>{this.props.title}</h2>\n            <form action =\"/create_process\" method=\"post\" onSubmit={function(e){\n                e.preventDefault();\n                this.props.onSubmit(e.target.title.value, e.target.desc.value, e.target.id.value) //이름으로 찾음\n            }.bind(this)}>\n                <p><input type=\"text\" name=\"title\" value={this.state.title} onChange={function(e){\n                    \n                    this.inputFormHendler(e);\n                    debugger;\n                }.bind(this)}/></p> \n                {/*<p><input type=\"text\" name=\"title\" value={this.props.y_title} /></p> props에 값은 리드 온니 */} \n                <p><textarea name=\"desc\" placeholder=\"description\" onChange={function(e){\n                    this.inputFormHendler(e);\n                }.bind(this)} value={this.state.desc} ></textarea></p>\n                <p><input type=\"submit\" value=\"submint\"/></p>\n                <input type =\"hidden\" name=\"id\" value={this.state.id}/>\n            </form>\n            {/* onsubmit은 submit타입 버튼누른 후 이벤트 발동 */}\n        </article>\n      );\n    }\n  }\n\nexport default UpdateContent;","import { render } from '@testing-library/react';\nimport React, {Component} from 'react';\nimport './App.css';\nimport TOC from './components/TOC' //toc는 컴포넌트에 toc에서 가져옴\nimport ReadArticle from './components/ReadArticle';\nimport Subject from './components/Subject';\nimport Control from './components/Control.js';\nimport CreateContent from './components/CreateContent';\nimport UpdateContent from './components/UpdateContent';\n\n// porps read only \n// state changes can be asynchronous modified using this.setState \n\n// class App extends Component{\n//   render(){\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           <p>\n//             Edit <code>src/App.js</code> and save to reload.\n//           </p>\n//           <a\n//             className=\"App-link\"\n//             href=\"https://reactjs.org\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//           >\n//             Learn React\n//           </a>\n//         </header>\n//       </div>\n//     );\n//   }\n// }\n//하나의 최상위 태그만 써야한다.\n//subject가 this 우리가 원하는 걸 출력함\n\nclass App extends Component { // class 안에는 strict mode가 적용됨 그래서 this는 undefined가 바잉됨\n  constructor(props){\n    super(props);\n    this.state = {\n      mode : 'read',\n      selected_content_id : 1,\n      subject : {title:'web', sub:'world wid web!'},\n      welcome : {title:'Welcom', desc:'Hello, React!!'}, \n      contents:[\n        {id:1, title:'html', desc:'hteml is...'},\n        {id:2, title:'css', desc:'css is...'},\n        {id:3, title:'javascript', desc:'javascript is...'}\n      ]\n    }\n  }// 가장 먼저 실행됨 초기화 담당\n\n  getReadContent(){\n    var num = (this.state.selected_content_id-1);\n    var data = this.state.contents[num];\n    return data;\n  }\n\n  getContent(){\n    var _title, _desc, _article = null;\n    if(this.state.mode === 'welcome'){\n        _title = this.state.welcome.title;\n        _desc = this.state.welcome.desc;\n        _article = <ReadArticle title={_title} desc={_desc}></ReadArticle>;\n    }else if(this.state.mode === 'read'){\n        // for(var i = 0; i < this.state.contents.length;i++){\n        //   var data = this.state.contents[i];\n        //   if(data.id == this.state.selected_content_id){\n        //     _title = data.title\n        //     _desc = data.desc\n        //     break;\n        //   }\n        // }\n        // 2021 05 07\n        var r_num = this.getReadContent();\n        _title = r_num.title;\n        _desc = r_num.desc;\n        _article = <ReadArticle title={_title} desc={_desc}></ReadArticle>;\n    }else if(this.state.mode == \"create\"){\n        _article = <CreateContent onSubmit={function(_title, _desc){\n        // set state add content to this.state.contents\n        var num = this.state.contents.length+1;\n        console.log(_title, _desc);\n        var _contents = this.state.contents.concat({id:num, title: _title, desc:_desc}) \n        // push는 원본을 수정한다 concat은 원본값에 추가한걸 리턴함 this.porps.data가 수정되면 toc에 슈드에 지장이 생김 비슷한걸로 object assign, array from 이있다\n        // 둘다 원본을 복사 해서 사용한다\n        this.setState({\n          contents:_contents\n        }); \n        // setState는 최초에 렌더링된 값을 변경하는 용도로 사용된다.\n        // 하지만 render가 끝나고 변경되기 때문에 값이 바로 변경되지는 않는다.\n        console.log(this.state.contents);\n      }.bind(this)}  title={this.state.mode}></CreateContent>\n    }else if(this.state.mode == \"update\"){\n        var r_num = this.getReadContent();\n        _article = <UpdateContent y_id ={r_num.id} y_title={r_num.title} y_desc={r_num.desc} title=\"update\" onSubmit = {function(title, desc, id){   \n          //업데이트 됨 \n          var _contents = Array.from(this.state.contents);\n          var Up_Num = (id-1);\n          _contents[Up_Num].title = title;\n          _contents[Up_Num].desc = desc;\n          this.setState({\n            contents :_contents,\n            mode : \"read\"\n          });\n        }.bind(this)}></UpdateContent> //bind 이유 클래스 안에서는 엄격모드가 실행된다. 그래서 명시해야함 onsubmit 은 윈도우 객체임\n    }\n    return _article;\n  }\n  render(){ //props 혹은 state가 변경되면 해당되는 component에 render가 변경된다.\n    return(\n\n      <div className = \"App\">\n        {/* <header>\n          <h1><a href=\"/\" onClick={function(e){\n            console.log('event:::', this);\n            e.preventDefault();\n            return;\n            console.log(e);\n            e.preventDefault(); //이벤트 동작 막음\n            //this.state.mode = 'welcome'; 작동 불가 리엑트는 소스가 변경되면 render를 하는데 \n            this.setState({\n              mode : 'welcome'\n            }) //bind를 안해주면 클릭한 것 window를 가리킨다.\n            // 그래서 바인드를 함 app안에 메소드 처럼 동작하기 위한 것\n\n          }.bind(this)}>{this.state.subject.title}</a></h1>\n          {this.state.subject.sub}\n        </header> */}\n        {/* \n          subject == title web or welcome \n          toc html, css, javascript 출력, 누르거 변경 내용 출력\n\n        */}\n\n        <Subject title={this.state.subject.title} sub ={this.state.subject.sub} onChangePage = {function(){\n            this.setState({\n              mode : 'welcome'\n            })\n        }.bind(this)}></Subject> \n\n        <TOC onChangePage = {function(id){\n            this.setState({mode:'read', selected_content_id:Number(id)});\n            //2021 05 07\n        }.bind(this)} data={this.state.contents}></TOC>\n\n        <Control onChangeMode = {function(_mode){\n          this.setState({\n            mode : _mode\n          });\n        }.bind(this)}></Control>\n        {/* <ReadArticle title={_title} desc={_desc}></ReadArticle> */}\n        {this.getContent() }\n      </div>\n    );\n  }\n}\n// <Article title={_title} desc={_desc}></Article> article에서는 title props를 통해 값을 주입이 가능 하다 사용자가 하지만 변경은 불가능 하다 컴포넌트 안에서 \n// props state 둘다 render를 가동시켜서 적재적소에 사용하면 된다\n// component 안에 state가 있다. 내부 동기 방식 버튼을 누르면 화면이 변경되거나 상태가 변경되는 조치\n// 외부에서는 props를통해 접근한다. 스마트폰에 버튼 \n// 상위 컴포넌트 app -> 하위 컴포넌트 toc, subject 등등 에게 값전달 혹은 조작 -> props\n// 하위 컴포넌트가 상위 컴포넌트에 값을 변경하고 싶으면 이벤트로 \n\n/*\ncreate\nread\nupdate\ndelete\n*/\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'; // import 를 통해 ./으로 불러옴 <App>(사용자 정의 태그) 이기도 하다 \nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App /> \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n//root = container \n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}